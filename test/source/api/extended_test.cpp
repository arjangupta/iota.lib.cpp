//
// MIT License
//
// Copyright (c) 2017 Thibault Martinez
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//
//

#include <gtest/gtest.h>

#include <iota/api/extended.hpp>
#include <iota/constants.hpp>
#include <iota/errors/illegal_state.hpp>
#include <test/utils/configuration.hpp>

TEST(Extended, GetBundleTransactionHash) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto res = api.getBundle(
      "VYTOQWVKMNIDHAFFQOBXKNEPIBKCIRBMVNPAINDCEHXTUWBRGJCMOVQQNNBUBCMBHYDNYSIVBUORA9999");

  EXPECT_EQ(res.getTransactions().size(), 2UL);

  const auto& trx1 = res.getTransactions()[0];
  EXPECT_EQ(
      trx1.getSignatureFragments(),
      "BMY9RQMXXBG9XJCCUKVQVXJIMRRPCX9KWIBWBLAOODDDHTFFFVBJSOEOXHEEWHBGMHTAUHXGBYQVBABPY9LIPAY9MAGV"
      "ITPCV9BPNZ9ZGYNSYIWHWEXBMBZROPRPTXUGXJOQPTYGXEUFPDRHUNPWYGCCNANA9RSBUAKAOZTQMCYLJKCDWQYTCRCV"
      "JATWKEFX9WMLHSKLMJ9EDOYSVQDIEGNTUXMILUBIWVCVIBAXSLZOBDMPIWLOAECUQFCTXINCJSKJFPDEAYVKY9CZTKQV"
      "AYXPVRGWKL9IMFIHPOUEQPSKHBMQEXPZGSSENSFD9OUTJDCTNIM9VJCCHYEMDZTVRMIOBYCDBAWFZAKBOULZJDBKWGB9"
      "NUCMXSLXKIZUBGXCYJAPQUYIDFHOYELK9PNWWGIDOTBAFDFBOLGHEGKDVBOOHHMRBLPYZO9QWR9DYKRVBMJRZXBI9TFJ"
      "BXBTVOOALSVCTX9PQRRCFPJBTYNLKIWLHWLWHXQYRZATEJNTFZQHKPIDYPXZV9MCFZDOIXGYVA9ZIRBLJXKALBQJVNZO"
      "BOVKQUPGUXUINZKIXAPSMQVFZVMDBSARRLFGIHIPHINBIUAHE9XZPNPRNKAQMWWKYGJMCYWPJLIMXBHXOJVROZZFJXZA"
      "9GVSJ9JKONHFWNNSEELFUGXADQIXQDJGDNTGKCYHRQAEXQJXEMM9A9YM9QKVGCYBLUBIISAIMQJFQLDWPDLFOXPWPOJS"
      "CIREDACYTKPKXAPDGOCYIGKJUKUYOFHUPHKNGFZJACVNYVXVFYRZDJLLLKJYMEPVE999BRIZLQVJQWVLODTKDLAAVYRY"
      "SIBVGURHPSEX9GGEJNNXOSCNMGJYXY9WJSLZOCDNIGZDRKZTRRLXCEBGJBFWTBDLPNMPMZAWDCWBZFXYBHTXTYSIXAK9"
      "DYBNJJUGJTHYBSMQEDXOFDXPRCFWKB9SQHMQDMUJFTCEUHALNVDGYFOA9AW9KWOUXGPHFGCCIWRTMFDCUGDMSCNSZCOZ"
      "ODKSP9VPQVFNDRFLRV9FQGDQHBJUYLUL9QOOGSZIDSRRUTF9ANBHQASSORMOMCCXHSFPKMMFDIRDQT9OTDNCAGNNPYDN"
      "WAAJRFXWWKWHLUJACUJUXHDGIBFAOGZFBPQWRCLPORKLCVXGL9JQAKWZBQYSZRYGFKTGKODLSLJNGK9CAYMZUTRLUXGE"
      "ACJVY9MXSRPHNXEZZLVCIQTXIWEEVIKSIKER9QRHOAPNYLBOLSKHBMREOBTYWOFUDPUW9NGCKRPCEOUHYCLSVZTU9QXM"
      "BDXJHDJND9LFUE9ZYIVQQZEJLAGTURMADKYNB9ZIQQOUUQTKAKHKYGFOZBAKZPCBMSFDJCXSARHZRSMSK9JLKTHJSWCR"
      "S9O9VMLNRHCRPZO9BDUOOQRLJK9CGNIOZZGZKPBTRIOQYWGCRSJYFKLSQKFADICELHQ9OWKLV9YEIYDIYATLILMAYOIF"
      "TBUJPJGVBMKDDYMSMNZRUT9GZGOZCFFSQPVHSXUIGWTQGDYFOCONNSYQI9ST99LE9ZWYQOLWHRCEXKUCFPYJBR9K9PXF"
      "FOSGGNLAMCJZYMQSSEFBUOWDZJAGQETMPNGWHYOJNHHPXSIKM9CXLXQGUEYAHW9OYJMUPFFIGZVVKEICLINNZRKMYROV"
      "UYHCSPADNNPEHA9ZMCRQLHNJUZP9CBMQWPXPHRJBVOZN9HLRDLKHJQEUAVSQR9KPQMPGQZUIPHBXUXVMYCRASB9XTWZO"
      "HJIHJKMEZBLJFAHGKFSMLN9XDVITRYUAXSBYGCLQSRJNVUWZYMHPHKKEPCA9GHWXLU9IRBTFWWVHZWURBJPFRGIKTNVY"
      "OUYJRVBZJJQTJNYJRHGRH9QIQUMVKHWMJGHTFDKWJJJFEFVCGWRFKRVUTJLGHDMXTSDQEGQFCTBQVCNLDFEUJEQDGB99"
      "F9T9VHNUISEYXPNBNBLZZTZLBISQN9XADSRXGWUCWRTXMCDKYHSODYRHSLIMJTNDFIMHRKKKHIECTMBTLWGMLQRGDIFU"
      "LRUDPOCZAEONMQOHTC9CUHZLLOQSUSTFYPTYHV9KOLPDDRTRCXFITJUZQSMHIYDFLU9LYN9YTEJ9YHJLPQDAAGHPKQRS"
      "UFPGFWDBXPCBOKJDAQVIQHTJIYZKXMHSHTT9EZDFRTYCGZAHGLMSFBTSSJZGLFZRLAHRLFK");
  EXPECT_EQ(trx1.getCurrentIndex(), 0);
  EXPECT_EQ(trx1.getLastIndex(), 1);
  EXPECT_EQ(trx1.getNonce(),
            "999999999999999999999999999999999999999999999999999999YOWYUNWPPFCGVZTJNRGHDKNNINP");
  EXPECT_EQ(trx1.getHash(),
            "VYTOQWVKMNIDHAFFQOBXKNEPIBKCIRBMVNPAINDCEHXTUWBRGJCMOVQQNNBUBCMBHYDNYSIVBUORA9999");
  EXPECT_EQ(trx1.getTag(), "CZUL99999999999999999999999");
  EXPECT_EQ(trx1.getTimestamp(), 1507576998);
  EXPECT_EQ(trx1.getTrunkTransaction(),
            "SOVJUIVPGKWKRAYOJHV9JQFGZAUWHXTLNRWXWOVEGABCBAHDFOFKVZVORLHFDBBBCBFDEPXNM9NK99999");
  EXPECT_EQ(trx1.getBranchTransaction(),
            "IRCRFRRPHHPRXV9SPFAYUODWDHM9KKKSELREJFVGYAUKNRQYZ9XKGJNYWOQPZGWJRWOUJHELPNICZ9999");
  EXPECT_EQ(trx1.getAddress(),
            "KPWCHICGJZXKE9GSUDXZYUAPLHAKAHYHDXNPHENTERYMMBQOPSQIDENXKLKCEYCPVTZQLEEJVYJZV9BWU");
  EXPECT_EQ(trx1.getValue(), 0);
  EXPECT_EQ(trx1.getBundle(),
            "OTTLTEEKYQHLMGCKGSKMEELHZXNHU9DHODIIZGTLAO9SKRUBWQAIBVWYLLPZFBHOZAXTT9FECVWQEXBVC");
  EXPECT_EQ(trx1.getPersistence(), false);

  const auto& trx2 = res.getTransactions()[1];
  EXPECT_EQ(
      trx2.getSignatureFragments(),
      "FDWXHUNOXXFNJJHJHHKZQPO9IOWRHTNT9MYVYGDADONCDM9MZQHBXIHWECQZJUCEHRHBKTSXFEMCWUJ9BTSIUJGHPU9W"
      "F9MFGDADLZMLVOFPJSDKAFIJHBHETCPSNRDYERJZ9KDQFDRFWAHGPOHXFHLEWFLRTUWHAKOSWNVHYHBGW9UVECZDGTFO"
      "QUJCUSUDMEKNTWCC9VFLLWQ9TCWZZWNOAZCYTOFCJDCRUOKVH9JNVKNKCTOAJ9QYSGTKJHDHVUCYMLGYZZNXMPLSILMW"
      "WTQZTVUXXIMBFIKYGMPCCPQQY9ZJXKFMWMDQAAXRYJBBCJKPMCU9LWOGNPISTYLSNXYQTOWZWUBKEMBIEZTBYPHZUZQF"
      "OVLYLDZTHZAU9FKWGWRLSIM9BYZMJDDRMNQSBHLPPRPFWMINY9DWLFOEZMHCBYICIHWGWGVFUAEHZEBORRLVVNFTRINV"
      "9CKXITEIDPQEUGYAZFRFWAWYXSWFXPWXOEIGTAZVGEEMQQJECBH9RBQGWGN9ZWC9TSVQCVIQFENMYZPNLXHIPOBCPVQD"
      "IZKCLYUJNAJHDGPKDXVQWLVEGRHVQLEVJVTX9BMIKKCW99EQVWMNWJR9HPJGJIX9MLGITQRMDZVFWIIPBWJHWKLCLIQT"
      "UEWI9DGISVOZFN9YXICBWHAOSVLYOQHD9NEDTDIAMKBESHYPUNEGNOTZGXWYNCOLONXMUEFZGLXM9NBZBORLSVPMSTGQ"
      "AVYHYAMKCLKFITZSSQCTFMQDHVWNGBLGUKAZZMQCNSOSX9RHWSIHXVRORTPZOLK9BLRU9FXDT9FOVNGKVSORRQLBOXGJ"
      "MDWKL9DSBEWNKYWOHRXODADCWMWDXKETXKIL9EWRLGC9UFMR9UIPCKDWDPYX9MFTHMLPOZCLXGCMZDCIQSTXXFONGGLJ"
      "LQDNFRLSFV9RJUTIJTRVNJBLAJSLJJNNAZJKVWTAEYXXNMJUTYODBEAVUHVWYLHQTZDCXSW9SNZLHPAFXTGEOCYECFQX"
      "DMHPRFBUUQPOD9VQNHJJO9SIPSEQOSVPHAJTMUEUZBIRGJHBUQYMHCRTYAPEWXMRPVPHDUKUWCZNAZHVVZGJKPFXQWYZ"
      "FKIIMJVZNPISFUUYJXYSMCACQMJJIJZY9XVHWINC9IMZJQWOBYDQFLANMTO9TKNH9SGNGYESANYBZYKRBQOOZPLNXKTE"
      "PGULNUBFIERCY9VFCKRVNSYD9TKMBQAGFAXZGSDQEEBTDBRKCSHIFUMPDBUIITISLWAZHGAPOFMDJA9WGWEUOPWYJKIO"
      "CEMVGFAOFWPZBJCRRSHMHUG9NKKH9SOXTUJUAXBF9MHYWHJ9ZTJRUQFKRLHMNVPWX9XFXLMVJAGASMWMIFYUZFAUCEIO"
      "OYMEYWOIZTNEWFVZKOQFECWEPSMOYFSJJKEJQMPSXGE9WTYRQJVMHUQZFD9MJUFFCNSGAZCTXYPIJFNSXAUCYPGZMNWM"
      "QWSWCKAQYKXJTWINSGPPZG9HLDLEAWUWEVCTVRCBDFOXKUROXH9HXXAXVPEJFRSLOGRVGYZASTEBAQNXJJROCYRTDPYF"
      "UIQJVDHAKEG9YACV9HCPJUEUKOYFNWDXCCJBIFQKYOXGRDHVTHEQUMHO999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999");
  EXPECT_EQ(trx2.getCurrentIndex(), 1);
  EXPECT_EQ(trx2.getLastIndex(), 1);
  EXPECT_EQ(trx2.getNonce(),
            "999999999999999999999999999999999999999999999999999999DJNVKXVOFNIJUTMVIFKCFVRWFEK");
  EXPECT_EQ(trx2.getHash(),
            "SOVJUIVPGKWKRAYOJHV9JQFGZAUWHXTLNRWXWOVEGABCBAHDFOFKVZVORLHFDBBBCBFDEPXNM9NK99999");
  EXPECT_EQ(trx2.getTag(), "999999999999999999999999999");
  EXPECT_EQ(trx2.getTimestamp(), 1507576998);
  EXPECT_EQ(trx2.getTrunkTransaction(),
            "IRCRFRRPHHPRXV9SPFAYUODWDHM9KKKSELREJFVGYAUKNRQYZ9XKGJNYWOQPZGWJRWOUJHELPNICZ9999");
  EXPECT_EQ(trx2.getBranchTransaction(),
            "UPGFY9BEXQAX99ZISOQXUFWNGADQBOGCMXDSRIVVMLPKOOQLIB9YLSIFPANOWMMFZPUFTQGPYHF9Z9999");
  EXPECT_EQ(trx2.getAddress(),
            "999999999999999999999999999999999999999999999999999999999999999999999999999999999");
  EXPECT_EQ(trx2.getValue(), 0);
  EXPECT_EQ(trx2.getBundle(),
            "OTTLTEEKYQHLMGCKGSKMEELHZXNHU9DHODIIZGTLAO9SKRUBWQAIBVWYLLPZFBHOZAXTT9FECVWQEXBVC");
  EXPECT_EQ(trx2.getPersistence(), false);
}

TEST(Extended, GetBundleTransactionHashNonTail) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };

  EXPECT_THROW(
      api.getBundle(
          "SOVJUIVPGKWKRAYOJHV9JQFGZAUWHXTLNRWXWOVEGABCBAHDFOFKVZVORLHFDBBBCBFDEPXNM9NK99999"),
      IOTA::Errors::IllegalState);
}

TEST(Extended, GetBundleBundleHash) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };

  EXPECT_THROW(
      api.getBundle(
          "OTTLTEEKYQHLMGCKGSKMEELHZXNHU9DHODIIZGTLAO9SKRUBWQAIBVWYLLPZFBHOZAXTT9FECVWQEXBVC"),
      IOTA::Errors::IllegalState);
}

TEST(Extended, GetBundleInvalidTrxHash) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };

  EXPECT_THROW(
      api.getBundle(
          "OTTLTEEKYQHLMGCKGSKMEELHZXNHU9DHODIIZGTLAO9SKRUBWQAIBVWYLLPZFBHOZAXTT9FECVWQE9999"),
      IOTA::Errors::IllegalState);
}

TEST(Extended, GetBundleInvalidHash) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };

  EXPECT_THROW(api.getBundle("salut"), IOTA::Errors::IllegalState);
}

TEST(Extended, TraverseBundleTransactionHash) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto res = api.traverseBundle(
      "VYTOQWVKMNIDHAFFQOBXKNEPIBKCIRBMVNPAINDCEHXTUWBRGJCMOVQQNNBUBCMBHYDNYSIVBUORA9999");

  EXPECT_EQ(res.getTransactions().size(), 2UL);

  const auto& trx1 = res.getTransactions()[0];
  EXPECT_EQ(
      trx1.getSignatureFragments(),
      "BMY9RQMXXBG9XJCCUKVQVXJIMRRPCX9KWIBWBLAOODDDHTFFFVBJSOEOXHEEWHBGMHTAUHXGBYQVBABPY9LIPAY9MAGV"
      "ITPCV9BPNZ9ZGYNSYIWHWEXBMBZROPRPTXUGXJOQPTYGXEUFPDRHUNPWYGCCNANA9RSBUAKAOZTQMCYLJKCDWQYTCRCV"
      "JATWKEFX9WMLHSKLMJ9EDOYSVQDIEGNTUXMILUBIWVCVIBAXSLZOBDMPIWLOAECUQFCTXINCJSKJFPDEAYVKY9CZTKQV"
      "AYXPVRGWKL9IMFIHPOUEQPSKHBMQEXPZGSSENSFD9OUTJDCTNIM9VJCCHYEMDZTVRMIOBYCDBAWFZAKBOULZJDBKWGB9"
      "NUCMXSLXKIZUBGXCYJAPQUYIDFHOYELK9PNWWGIDOTBAFDFBOLGHEGKDVBOOHHMRBLPYZO9QWR9DYKRVBMJRZXBI9TFJ"
      "BXBTVOOALSVCTX9PQRRCFPJBTYNLKIWLHWLWHXQYRZATEJNTFZQHKPIDYPXZV9MCFZDOIXGYVA9ZIRBLJXKALBQJVNZO"
      "BOVKQUPGUXUINZKIXAPSMQVFZVMDBSARRLFGIHIPHINBIUAHE9XZPNPRNKAQMWWKYGJMCYWPJLIMXBHXOJVROZZFJXZA"
      "9GVSJ9JKONHFWNNSEELFUGXADQIXQDJGDNTGKCYHRQAEXQJXEMM9A9YM9QKVGCYBLUBIISAIMQJFQLDWPDLFOXPWPOJS"
      "CIREDACYTKPKXAPDGOCYIGKJUKUYOFHUPHKNGFZJACVNYVXVFYRZDJLLLKJYMEPVE999BRIZLQVJQWVLODTKDLAAVYRY"
      "SIBVGURHPSEX9GGEJNNXOSCNMGJYXY9WJSLZOCDNIGZDRKZTRRLXCEBGJBFWTBDLPNMPMZAWDCWBZFXYBHTXTYSIXAK9"
      "DYBNJJUGJTHYBSMQEDXOFDXPRCFWKB9SQHMQDMUJFTCEUHALNVDGYFOA9AW9KWOUXGPHFGCCIWRTMFDCUGDMSCNSZCOZ"
      "ODKSP9VPQVFNDRFLRV9FQGDQHBJUYLUL9QOOGSZIDSRRUTF9ANBHQASSORMOMCCXHSFPKMMFDIRDQT9OTDNCAGNNPYDN"
      "WAAJRFXWWKWHLUJACUJUXHDGIBFAOGZFBPQWRCLPORKLCVXGL9JQAKWZBQYSZRYGFKTGKODLSLJNGK9CAYMZUTRLUXGE"
      "ACJVY9MXSRPHNXEZZLVCIQTXIWEEVIKSIKER9QRHOAPNYLBOLSKHBMREOBTYWOFUDPUW9NGCKRPCEOUHYCLSVZTU9QXM"
      "BDXJHDJND9LFUE9ZYIVQQZEJLAGTURMADKYNB9ZIQQOUUQTKAKHKYGFOZBAKZPCBMSFDJCXSARHZRSMSK9JLKTHJSWCR"
      "S9O9VMLNRHCRPZO9BDUOOQRLJK9CGNIOZZGZKPBTRIOQYWGCRSJYFKLSQKFADICELHQ9OWKLV9YEIYDIYATLILMAYOIF"
      "TBUJPJGVBMKDDYMSMNZRUT9GZGOZCFFSQPVHSXUIGWTQGDYFOCONNSYQI9ST99LE9ZWYQOLWHRCEXKUCFPYJBR9K9PXF"
      "FOSGGNLAMCJZYMQSSEFBUOWDZJAGQETMPNGWHYOJNHHPXSIKM9CXLXQGUEYAHW9OYJMUPFFIGZVVKEICLINNZRKMYROV"
      "UYHCSPADNNPEHA9ZMCRQLHNJUZP9CBMQWPXPHRJBVOZN9HLRDLKHJQEUAVSQR9KPQMPGQZUIPHBXUXVMYCRASB9XTWZO"
      "HJIHJKMEZBLJFAHGKFSMLN9XDVITRYUAXSBYGCLQSRJNVUWZYMHPHKKEPCA9GHWXLU9IRBTFWWVHZWURBJPFRGIKTNVY"
      "OUYJRVBZJJQTJNYJRHGRH9QIQUMVKHWMJGHTFDKWJJJFEFVCGWRFKRVUTJLGHDMXTSDQEGQFCTBQVCNLDFEUJEQDGB99"
      "F9T9VHNUISEYXPNBNBLZZTZLBISQN9XADSRXGWUCWRTXMCDKYHSODYRHSLIMJTNDFIMHRKKKHIECTMBTLWGMLQRGDIFU"
      "LRUDPOCZAEONMQOHTC9CUHZLLOQSUSTFYPTYHV9KOLPDDRTRCXFITJUZQSMHIYDFLU9LYN9YTEJ9YHJLPQDAAGHPKQRS"
      "UFPGFWDBXPCBOKJDAQVIQHTJIYZKXMHSHTT9EZDFRTYCGZAHGLMSFBTSSJZGLFZRLAHRLFK");
  EXPECT_EQ(trx1.getCurrentIndex(), 0);
  EXPECT_EQ(trx1.getLastIndex(), 1);
  EXPECT_EQ(trx1.getNonce(),
            "999999999999999999999999999999999999999999999999999999YOWYUNWPPFCGVZTJNRGHDKNNINP");
  EXPECT_EQ(trx1.getHash(),
            "VYTOQWVKMNIDHAFFQOBXKNEPIBKCIRBMVNPAINDCEHXTUWBRGJCMOVQQNNBUBCMBHYDNYSIVBUORA9999");
  EXPECT_EQ(trx1.getTag(), "CZUL99999999999999999999999");
  EXPECT_EQ(trx1.getTimestamp(), 1507576998);
  EXPECT_EQ(trx1.getTrunkTransaction(),
            "SOVJUIVPGKWKRAYOJHV9JQFGZAUWHXTLNRWXWOVEGABCBAHDFOFKVZVORLHFDBBBCBFDEPXNM9NK99999");
  EXPECT_EQ(trx1.getBranchTransaction(),
            "IRCRFRRPHHPRXV9SPFAYUODWDHM9KKKSELREJFVGYAUKNRQYZ9XKGJNYWOQPZGWJRWOUJHELPNICZ9999");
  EXPECT_EQ(trx1.getAddress(),
            "KPWCHICGJZXKE9GSUDXZYUAPLHAKAHYHDXNPHENTERYMMBQOPSQIDENXKLKCEYCPVTZQLEEJVYJZV9BWU");
  EXPECT_EQ(trx1.getValue(), 0);
  EXPECT_EQ(trx1.getBundle(),
            "OTTLTEEKYQHLMGCKGSKMEELHZXNHU9DHODIIZGTLAO9SKRUBWQAIBVWYLLPZFBHOZAXTT9FECVWQEXBVC");
  EXPECT_EQ(trx1.getPersistence(), false);

  const auto& trx2 = res.getTransactions()[1];
  EXPECT_EQ(
      trx2.getSignatureFragments(),
      "FDWXHUNOXXFNJJHJHHKZQPO9IOWRHTNT9MYVYGDADONCDM9MZQHBXIHWECQZJUCEHRHBKTSXFEMCWUJ9BTSIUJGHPU9W"
      "F9MFGDADLZMLVOFPJSDKAFIJHBHETCPSNRDYERJZ9KDQFDRFWAHGPOHXFHLEWFLRTUWHAKOSWNVHYHBGW9UVECZDGTFO"
      "QUJCUSUDMEKNTWCC9VFLLWQ9TCWZZWNOAZCYTOFCJDCRUOKVH9JNVKNKCTOAJ9QYSGTKJHDHVUCYMLGYZZNXMPLSILMW"
      "WTQZTVUXXIMBFIKYGMPCCPQQY9ZJXKFMWMDQAAXRYJBBCJKPMCU9LWOGNPISTYLSNXYQTOWZWUBKEMBIEZTBYPHZUZQF"
      "OVLYLDZTHZAU9FKWGWRLSIM9BYZMJDDRMNQSBHLPPRPFWMINY9DWLFOEZMHCBYICIHWGWGVFUAEHZEBORRLVVNFTRINV"
      "9CKXITEIDPQEUGYAZFRFWAWYXSWFXPWXOEIGTAZVGEEMQQJECBH9RBQGWGN9ZWC9TSVQCVIQFENMYZPNLXHIPOBCPVQD"
      "IZKCLYUJNAJHDGPKDXVQWLVEGRHVQLEVJVTX9BMIKKCW99EQVWMNWJR9HPJGJIX9MLGITQRMDZVFWIIPBWJHWKLCLIQT"
      "UEWI9DGISVOZFN9YXICBWHAOSVLYOQHD9NEDTDIAMKBESHYPUNEGNOTZGXWYNCOLONXMUEFZGLXM9NBZBORLSVPMSTGQ"
      "AVYHYAMKCLKFITZSSQCTFMQDHVWNGBLGUKAZZMQCNSOSX9RHWSIHXVRORTPZOLK9BLRU9FXDT9FOVNGKVSORRQLBOXGJ"
      "MDWKL9DSBEWNKYWOHRXODADCWMWDXKETXKIL9EWRLGC9UFMR9UIPCKDWDPYX9MFTHMLPOZCLXGCMZDCIQSTXXFONGGLJ"
      "LQDNFRLSFV9RJUTIJTRVNJBLAJSLJJNNAZJKVWTAEYXXNMJUTYODBEAVUHVWYLHQTZDCXSW9SNZLHPAFXTGEOCYECFQX"
      "DMHPRFBUUQPOD9VQNHJJO9SIPSEQOSVPHAJTMUEUZBIRGJHBUQYMHCRTYAPEWXMRPVPHDUKUWCZNAZHVVZGJKPFXQWYZ"
      "FKIIMJVZNPISFUUYJXYSMCACQMJJIJZY9XVHWINC9IMZJQWOBYDQFLANMTO9TKNH9SGNGYESANYBZYKRBQOOZPLNXKTE"
      "PGULNUBFIERCY9VFCKRVNSYD9TKMBQAGFAXZGSDQEEBTDBRKCSHIFUMPDBUIITISLWAZHGAPOFMDJA9WGWEUOPWYJKIO"
      "CEMVGFAOFWPZBJCRRSHMHUG9NKKH9SOXTUJUAXBF9MHYWHJ9ZTJRUQFKRLHMNVPWX9XFXLMVJAGASMWMIFYUZFAUCEIO"
      "OYMEYWOIZTNEWFVZKOQFECWEPSMOYFSJJKEJQMPSXGE9WTYRQJVMHUQZFD9MJUFFCNSGAZCTXYPIJFNSXAUCYPGZMNWM"
      "QWSWCKAQYKXJTWINSGPPZG9HLDLEAWUWEVCTVRCBDFOXKUROXH9HXXAXVPEJFRSLOGRVGYZASTEBAQNXJJROCYRTDPYF"
      "UIQJVDHAKEG9YACV9HCPJUEUKOYFNWDXCCJBIFQKYOXGRDHVTHEQUMHO999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999");
  EXPECT_EQ(trx2.getCurrentIndex(), 1);
  EXPECT_EQ(trx2.getLastIndex(), 1);
  EXPECT_EQ(trx2.getNonce(),
            "999999999999999999999999999999999999999999999999999999DJNVKXVOFNIJUTMVIFKCFVRWFEK");
  EXPECT_EQ(trx2.getHash(),
            "SOVJUIVPGKWKRAYOJHV9JQFGZAUWHXTLNRWXWOVEGABCBAHDFOFKVZVORLHFDBBBCBFDEPXNM9NK99999");
  EXPECT_EQ(trx2.getTag(), "999999999999999999999999999");
  EXPECT_EQ(trx2.getTimestamp(), 1507576998);
  EXPECT_EQ(trx2.getTrunkTransaction(),
            "IRCRFRRPHHPRXV9SPFAYUODWDHM9KKKSELREJFVGYAUKNRQYZ9XKGJNYWOQPZGWJRWOUJHELPNICZ9999");
  EXPECT_EQ(trx2.getBranchTransaction(),
            "UPGFY9BEXQAX99ZISOQXUFWNGADQBOGCMXDSRIVVMLPKOOQLIB9YLSIFPANOWMMFZPUFTQGPYHF9Z9999");
  EXPECT_EQ(trx2.getAddress(),
            "999999999999999999999999999999999999999999999999999999999999999999999999999999999");
  EXPECT_EQ(trx2.getValue(), 0);
  EXPECT_EQ(trx2.getBundle(),
            "OTTLTEEKYQHLMGCKGSKMEELHZXNHU9DHODIIZGTLAO9SKRUBWQAIBVWYLLPZFBHOZAXTT9FECVWQEXBVC");
  EXPECT_EQ(trx2.getPersistence(), false);
}

TEST(Extended, TraverseBundleTransactionHashNonTail) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };

  EXPECT_THROW(
      api.traverseBundle(
          "SOVJUIVPGKWKRAYOJHV9JQFGZAUWHXTLNRWXWOVEGABCBAHDFOFKVZVORLHFDBBBCBFDEPXNM9NK99999"),
      IOTA::Errors::IllegalState);
}

TEST(Extended, TraverseBundleBundleHash) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };

  EXPECT_THROW(
      api.traverseBundle(
          "OTTLTEEKYQHLMGCKGSKMEELHZXNHU9DHODIIZGTLAO9SKRUBWQAIBVWYLLPZFBHOZAXTT9FECVWQEXBVC"),
      IOTA::Errors::IllegalState);
}

TEST(Extended, TraverseBundleInvalidTrxHash) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };

  EXPECT_THROW(
      api.traverseBundle(
          "OTTLTEEKYQHLMGCKGSKMEELHZXNHU9DHODIIZGTLAO9SKRUBWQAIBVWYLLPZFBHOZAXTT9FECVWQE9999"),
      IOTA::Errors::IllegalState);
}

TEST(Extended, TraverseBundleInvalidHash) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };

  EXPECT_THROW(api.traverseBundle("salut"), IOTA::Errors::IllegalState);
}

TEST(Extended, TraverseBundleFullTransactionHash) {
  auto api    = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto bundle = IOTA::Models::Bundle{};
  auto res    = api.traverseBundle(
      "VYTOQWVKMNIDHAFFQOBXKNEPIBKCIRBMVNPAINDCEHXTUWBRGJCMOVQQNNBUBCMBHYDNYSIVBUORA9999", "",
      bundle);

  EXPECT_EQ(res.getTransactions().size(), 2UL);

  const auto& trx1 = res.getTransactions()[0];
  EXPECT_EQ(
      trx1.getSignatureFragments(),
      "BMY9RQMXXBG9XJCCUKVQVXJIMRRPCX9KWIBWBLAOODDDHTFFFVBJSOEOXHEEWHBGMHTAUHXGBYQVBABPY9LIPAY9MAGV"
      "ITPCV9BPNZ9ZGYNSYIWHWEXBMBZROPRPTXUGXJOQPTYGXEUFPDRHUNPWYGCCNANA9RSBUAKAOZTQMCYLJKCDWQYTCRCV"
      "JATWKEFX9WMLHSKLMJ9EDOYSVQDIEGNTUXMILUBIWVCVIBAXSLZOBDMPIWLOAECUQFCTXINCJSKJFPDEAYVKY9CZTKQV"
      "AYXPVRGWKL9IMFIHPOUEQPSKHBMQEXPZGSSENSFD9OUTJDCTNIM9VJCCHYEMDZTVRMIOBYCDBAWFZAKBOULZJDBKWGB9"
      "NUCMXSLXKIZUBGXCYJAPQUYIDFHOYELK9PNWWGIDOTBAFDFBOLGHEGKDVBOOHHMRBLPYZO9QWR9DYKRVBMJRZXBI9TFJ"
      "BXBTVOOALSVCTX9PQRRCFPJBTYNLKIWLHWLWHXQYRZATEJNTFZQHKPIDYPXZV9MCFZDOIXGYVA9ZIRBLJXKALBQJVNZO"
      "BOVKQUPGUXUINZKIXAPSMQVFZVMDBSARRLFGIHIPHINBIUAHE9XZPNPRNKAQMWWKYGJMCYWPJLIMXBHXOJVROZZFJXZA"
      "9GVSJ9JKONHFWNNSEELFUGXADQIXQDJGDNTGKCYHRQAEXQJXEMM9A9YM9QKVGCYBLUBIISAIMQJFQLDWPDLFOXPWPOJS"
      "CIREDACYTKPKXAPDGOCYIGKJUKUYOFHUPHKNGFZJACVNYVXVFYRZDJLLLKJYMEPVE999BRIZLQVJQWVLODTKDLAAVYRY"
      "SIBVGURHPSEX9GGEJNNXOSCNMGJYXY9WJSLZOCDNIGZDRKZTRRLXCEBGJBFWTBDLPNMPMZAWDCWBZFXYBHTXTYSIXAK9"
      "DYBNJJUGJTHYBSMQEDXOFDXPRCFWKB9SQHMQDMUJFTCEUHALNVDGYFOA9AW9KWOUXGPHFGCCIWRTMFDCUGDMSCNSZCOZ"
      "ODKSP9VPQVFNDRFLRV9FQGDQHBJUYLUL9QOOGSZIDSRRUTF9ANBHQASSORMOMCCXHSFPKMMFDIRDQT9OTDNCAGNNPYDN"
      "WAAJRFXWWKWHLUJACUJUXHDGIBFAOGZFBPQWRCLPORKLCVXGL9JQAKWZBQYSZRYGFKTGKODLSLJNGK9CAYMZUTRLUXGE"
      "ACJVY9MXSRPHNXEZZLVCIQTXIWEEVIKSIKER9QRHOAPNYLBOLSKHBMREOBTYWOFUDPUW9NGCKRPCEOUHYCLSVZTU9QXM"
      "BDXJHDJND9LFUE9ZYIVQQZEJLAGTURMADKYNB9ZIQQOUUQTKAKHKYGFOZBAKZPCBMSFDJCXSARHZRSMSK9JLKTHJSWCR"
      "S9O9VMLNRHCRPZO9BDUOOQRLJK9CGNIOZZGZKPBTRIOQYWGCRSJYFKLSQKFADICELHQ9OWKLV9YEIYDIYATLILMAYOIF"
      "TBUJPJGVBMKDDYMSMNZRUT9GZGOZCFFSQPVHSXUIGWTQGDYFOCONNSYQI9ST99LE9ZWYQOLWHRCEXKUCFPYJBR9K9PXF"
      "FOSGGNLAMCJZYMQSSEFBUOWDZJAGQETMPNGWHYOJNHHPXSIKM9CXLXQGUEYAHW9OYJMUPFFIGZVVKEICLINNZRKMYROV"
      "UYHCSPADNNPEHA9ZMCRQLHNJUZP9CBMQWPXPHRJBVOZN9HLRDLKHJQEUAVSQR9KPQMPGQZUIPHBXUXVMYCRASB9XTWZO"
      "HJIHJKMEZBLJFAHGKFSMLN9XDVITRYUAXSBYGCLQSRJNVUWZYMHPHKKEPCA9GHWXLU9IRBTFWWVHZWURBJPFRGIKTNVY"
      "OUYJRVBZJJQTJNYJRHGRH9QIQUMVKHWMJGHTFDKWJJJFEFVCGWRFKRVUTJLGHDMXTSDQEGQFCTBQVCNLDFEUJEQDGB99"
      "F9T9VHNUISEYXPNBNBLZZTZLBISQN9XADSRXGWUCWRTXMCDKYHSODYRHSLIMJTNDFIMHRKKKHIECTMBTLWGMLQRGDIFU"
      "LRUDPOCZAEONMQOHTC9CUHZLLOQSUSTFYPTYHV9KOLPDDRTRCXFITJUZQSMHIYDFLU9LYN9YTEJ9YHJLPQDAAGHPKQRS"
      "UFPGFWDBXPCBOKJDAQVIQHTJIYZKXMHSHTT9EZDFRTYCGZAHGLMSFBTSSJZGLFZRLAHRLFK");
  EXPECT_EQ(trx1.getCurrentIndex(), 0);
  EXPECT_EQ(trx1.getLastIndex(), 1);
  EXPECT_EQ(trx1.getNonce(),
            "999999999999999999999999999999999999999999999999999999YOWYUNWPPFCGVZTJNRGHDKNNINP");
  EXPECT_EQ(trx1.getHash(),
            "VYTOQWVKMNIDHAFFQOBXKNEPIBKCIRBMVNPAINDCEHXTUWBRGJCMOVQQNNBUBCMBHYDNYSIVBUORA9999");
  EXPECT_EQ(trx1.getTag(), "CZUL99999999999999999999999");
  EXPECT_EQ(trx1.getTimestamp(), 1507576998);
  EXPECT_EQ(trx1.getTrunkTransaction(),
            "SOVJUIVPGKWKRAYOJHV9JQFGZAUWHXTLNRWXWOVEGABCBAHDFOFKVZVORLHFDBBBCBFDEPXNM9NK99999");
  EXPECT_EQ(trx1.getBranchTransaction(),
            "IRCRFRRPHHPRXV9SPFAYUODWDHM9KKKSELREJFVGYAUKNRQYZ9XKGJNYWOQPZGWJRWOUJHELPNICZ9999");
  EXPECT_EQ(trx1.getAddress(),
            "KPWCHICGJZXKE9GSUDXZYUAPLHAKAHYHDXNPHENTERYMMBQOPSQIDENXKLKCEYCPVTZQLEEJVYJZV9BWU");
  EXPECT_EQ(trx1.getValue(), 0);
  EXPECT_EQ(trx1.getBundle(),
            "OTTLTEEKYQHLMGCKGSKMEELHZXNHU9DHODIIZGTLAO9SKRUBWQAIBVWYLLPZFBHOZAXTT9FECVWQEXBVC");
  EXPECT_EQ(trx1.getPersistence(), false);

  const auto& trx2 = res.getTransactions()[1];
  EXPECT_EQ(
      trx2.getSignatureFragments(),
      "FDWXHUNOXXFNJJHJHHKZQPO9IOWRHTNT9MYVYGDADONCDM9MZQHBXIHWECQZJUCEHRHBKTSXFEMCWUJ9BTSIUJGHPU9W"
      "F9MFGDADLZMLVOFPJSDKAFIJHBHETCPSNRDYERJZ9KDQFDRFWAHGPOHXFHLEWFLRTUWHAKOSWNVHYHBGW9UVECZDGTFO"
      "QUJCUSUDMEKNTWCC9VFLLWQ9TCWZZWNOAZCYTOFCJDCRUOKVH9JNVKNKCTOAJ9QYSGTKJHDHVUCYMLGYZZNXMPLSILMW"
      "WTQZTVUXXIMBFIKYGMPCCPQQY9ZJXKFMWMDQAAXRYJBBCJKPMCU9LWOGNPISTYLSNXYQTOWZWUBKEMBIEZTBYPHZUZQF"
      "OVLYLDZTHZAU9FKWGWRLSIM9BYZMJDDRMNQSBHLPPRPFWMINY9DWLFOEZMHCBYICIHWGWGVFUAEHZEBORRLVVNFTRINV"
      "9CKXITEIDPQEUGYAZFRFWAWYXSWFXPWXOEIGTAZVGEEMQQJECBH9RBQGWGN9ZWC9TSVQCVIQFENMYZPNLXHIPOBCPVQD"
      "IZKCLYUJNAJHDGPKDXVQWLVEGRHVQLEVJVTX9BMIKKCW99EQVWMNWJR9HPJGJIX9MLGITQRMDZVFWIIPBWJHWKLCLIQT"
      "UEWI9DGISVOZFN9YXICBWHAOSVLYOQHD9NEDTDIAMKBESHYPUNEGNOTZGXWYNCOLONXMUEFZGLXM9NBZBORLSVPMSTGQ"
      "AVYHYAMKCLKFITZSSQCTFMQDHVWNGBLGUKAZZMQCNSOSX9RHWSIHXVRORTPZOLK9BLRU9FXDT9FOVNGKVSORRQLBOXGJ"
      "MDWKL9DSBEWNKYWOHRXODADCWMWDXKETXKIL9EWRLGC9UFMR9UIPCKDWDPYX9MFTHMLPOZCLXGCMZDCIQSTXXFONGGLJ"
      "LQDNFRLSFV9RJUTIJTRVNJBLAJSLJJNNAZJKVWTAEYXXNMJUTYODBEAVUHVWYLHQTZDCXSW9SNZLHPAFXTGEOCYECFQX"
      "DMHPRFBUUQPOD9VQNHJJO9SIPSEQOSVPHAJTMUEUZBIRGJHBUQYMHCRTYAPEWXMRPVPHDUKUWCZNAZHVVZGJKPFXQWYZ"
      "FKIIMJVZNPISFUUYJXYSMCACQMJJIJZY9XVHWINC9IMZJQWOBYDQFLANMTO9TKNH9SGNGYESANYBZYKRBQOOZPLNXKTE"
      "PGULNUBFIERCY9VFCKRVNSYD9TKMBQAGFAXZGSDQEEBTDBRKCSHIFUMPDBUIITISLWAZHGAPOFMDJA9WGWEUOPWYJKIO"
      "CEMVGFAOFWPZBJCRRSHMHUG9NKKH9SOXTUJUAXBF9MHYWHJ9ZTJRUQFKRLHMNVPWX9XFXLMVJAGASMWMIFYUZFAUCEIO"
      "OYMEYWOIZTNEWFVZKOQFECWEPSMOYFSJJKEJQMPSXGE9WTYRQJVMHUQZFD9MJUFFCNSGAZCTXYPIJFNSXAUCYPGZMNWM"
      "QWSWCKAQYKXJTWINSGPPZG9HLDLEAWUWEVCTVRCBDFOXKUROXH9HXXAXVPEJFRSLOGRVGYZASTEBAQNXJJROCYRTDPYF"
      "UIQJVDHAKEG9YACV9HCPJUEUKOYFNWDXCCJBIFQKYOXGRDHVTHEQUMHO999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999");
  EXPECT_EQ(trx2.getCurrentIndex(), 1);
  EXPECT_EQ(trx2.getLastIndex(), 1);
  EXPECT_EQ(trx2.getNonce(),
            "999999999999999999999999999999999999999999999999999999DJNVKXVOFNIJUTMVIFKCFVRWFEK");
  EXPECT_EQ(trx2.getHash(),
            "SOVJUIVPGKWKRAYOJHV9JQFGZAUWHXTLNRWXWOVEGABCBAHDFOFKVZVORLHFDBBBCBFDEPXNM9NK99999");
  EXPECT_EQ(trx2.getTag(), "999999999999999999999999999");
  EXPECT_EQ(trx2.getTimestamp(), 1507576998);
  EXPECT_EQ(trx2.getTrunkTransaction(),
            "IRCRFRRPHHPRXV9SPFAYUODWDHM9KKKSELREJFVGYAUKNRQYZ9XKGJNYWOQPZGWJRWOUJHELPNICZ9999");
  EXPECT_EQ(trx2.getBranchTransaction(),
            "UPGFY9BEXQAX99ZISOQXUFWNGADQBOGCMXDSRIVVMLPKOOQLIB9YLSIFPANOWMMFZPUFTQGPYHF9Z9999");
  EXPECT_EQ(trx2.getAddress(),
            "999999999999999999999999999999999999999999999999999999999999999999999999999999999");
  EXPECT_EQ(trx2.getValue(), 0);
  EXPECT_EQ(trx2.getBundle(),
            "OTTLTEEKYQHLMGCKGSKMEELHZXNHU9DHODIIZGTLAO9SKRUBWQAIBVWYLLPZFBHOZAXTT9FECVWQEXBVC");
  EXPECT_EQ(trx2.getPersistence(), false);
}

TEST(Extended, TraverseBundleFullTransactionHashNonTail) {
  auto api    = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto bundle = IOTA::Models::Bundle{};

  EXPECT_THROW(
      api.traverseBundle(
          "SOVJUIVPGKWKRAYOJHV9JQFGZAUWHXTLNRWXWOVEGABCBAHDFOFKVZVORLHFDBBBCBFDEPXNM9NK99999", "",
          bundle),
      IOTA::Errors::IllegalState);
}

TEST(Extended, TraverseBundleFullBundleHash) {
  auto api    = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto bundle = IOTA::Models::Bundle{};

  EXPECT_THROW(
      api.traverseBundle(
          "OTTLTEEKYQHLMGCKGSKMEELHZXNHU9DHODIIZGTLAO9SKRUBWQAIBVWYLLPZFBHOZAXTT9FECVWQEXBVC", "",
          bundle),
      IOTA::Errors::IllegalState);
}

TEST(Extended, TraverseBundleFullInvalidTrxHash) {
  auto api    = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto bundle = IOTA::Models::Bundle{};

  EXPECT_THROW(
      api.traverseBundle(
          "OTTLTEEKYQHLMGCKGSKMEELHZXNHU9DHODIIZGTLAO9SKRUBWQAIBVWYLLPZFBHOZAXTT9FECVWQE9999", "",
          bundle),
      IOTA::Errors::IllegalState);
}

TEST(Extended, TraverseBundleFullInvalidHash) {
  auto api    = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto bundle = IOTA::Models::Bundle{};

  EXPECT_THROW(api.traverseBundle("salut", "", bundle), IOTA::Errors::IllegalState);
}

TEST(Extended, TraverseBundleFullInvalidBundleHash) {
  auto api    = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto bundle = IOTA::Models::Bundle{};
  auto res    = api.traverseBundle(
      "VYTOQWVKMNIDHAFFQOBXKNEPIBKCIRBMVNPAINDCEHXTUWBRGJCMOVQQNNBUBCMBHYDNYSIVBUORA9999", "yolo",
      bundle);

  EXPECT_EQ(res.getTransactions().size(), 0UL);
}

TEST(Extended, TraverseBundleFullIntermediateTrxWithAppending) {
  auto api    = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto bundle = IOTA::Models::Bundle{ { IOTA::Models::Transaction{ "address", 42, "tag", 21 } } };
  auto res    = api.traverseBundle(
      "SOVJUIVPGKWKRAYOJHV9JQFGZAUWHXTLNRWXWOVEGABCBAHDFOFKVZVORLHFDBBBCBFDEPXNM9NK99999",
      "OTTLTEEKYQHLMGCKGSKMEELHZXNHU9DHODIIZGTLAO9SKRUBWQAIBVWYLLPZFBHOZAXTT9FECVWQEXBVC", bundle);

  EXPECT_EQ(res.getTransactions().size(), 2UL);

  const auto& trx1 = res.getTransactions()[0];
  EXPECT_EQ(trx1.getAddress(), "address");
  EXPECT_EQ(trx1.getValue(), 42);
  EXPECT_EQ(trx1.getTag(), "tag");
  EXPECT_EQ(trx1.getTimestamp(), 21);

  const auto& trx2 = res.getTransactions()[1];
  EXPECT_EQ(
      trx2.getSignatureFragments(),
      "FDWXHUNOXXFNJJHJHHKZQPO9IOWRHTNT9MYVYGDADONCDM9MZQHBXIHWECQZJUCEHRHBKTSXFEMCWUJ9BTSIUJGHPU9W"
      "F9MFGDADLZMLVOFPJSDKAFIJHBHETCPSNRDYERJZ9KDQFDRFWAHGPOHXFHLEWFLRTUWHAKOSWNVHYHBGW9UVECZDGTFO"
      "QUJCUSUDMEKNTWCC9VFLLWQ9TCWZZWNOAZCYTOFCJDCRUOKVH9JNVKNKCTOAJ9QYSGTKJHDHVUCYMLGYZZNXMPLSILMW"
      "WTQZTVUXXIMBFIKYGMPCCPQQY9ZJXKFMWMDQAAXRYJBBCJKPMCU9LWOGNPISTYLSNXYQTOWZWUBKEMBIEZTBYPHZUZQF"
      "OVLYLDZTHZAU9FKWGWRLSIM9BYZMJDDRMNQSBHLPPRPFWMINY9DWLFOEZMHCBYICIHWGWGVFUAEHZEBORRLVVNFTRINV"
      "9CKXITEIDPQEUGYAZFRFWAWYXSWFXPWXOEIGTAZVGEEMQQJECBH9RBQGWGN9ZWC9TSVQCVIQFENMYZPNLXHIPOBCPVQD"
      "IZKCLYUJNAJHDGPKDXVQWLVEGRHVQLEVJVTX9BMIKKCW99EQVWMNWJR9HPJGJIX9MLGITQRMDZVFWIIPBWJHWKLCLIQT"
      "UEWI9DGISVOZFN9YXICBWHAOSVLYOQHD9NEDTDIAMKBESHYPUNEGNOTZGXWYNCOLONXMUEFZGLXM9NBZBORLSVPMSTGQ"
      "AVYHYAMKCLKFITZSSQCTFMQDHVWNGBLGUKAZZMQCNSOSX9RHWSIHXVRORTPZOLK9BLRU9FXDT9FOVNGKVSORRQLBOXGJ"
      "MDWKL9DSBEWNKYWOHRXODADCWMWDXKETXKIL9EWRLGC9UFMR9UIPCKDWDPYX9MFTHMLPOZCLXGCMZDCIQSTXXFONGGLJ"
      "LQDNFRLSFV9RJUTIJTRVNJBLAJSLJJNNAZJKVWTAEYXXNMJUTYODBEAVUHVWYLHQTZDCXSW9SNZLHPAFXTGEOCYECFQX"
      "DMHPRFBUUQPOD9VQNHJJO9SIPSEQOSVPHAJTMUEUZBIRGJHBUQYMHCRTYAPEWXMRPVPHDUKUWCZNAZHVVZGJKPFXQWYZ"
      "FKIIMJVZNPISFUUYJXYSMCACQMJJIJZY9XVHWINC9IMZJQWOBYDQFLANMTO9TKNH9SGNGYESANYBZYKRBQOOZPLNXKTE"
      "PGULNUBFIERCY9VFCKRVNSYD9TKMBQAGFAXZGSDQEEBTDBRKCSHIFUMPDBUIITISLWAZHGAPOFMDJA9WGWEUOPWYJKIO"
      "CEMVGFAOFWPZBJCRRSHMHUG9NKKH9SOXTUJUAXBF9MHYWHJ9ZTJRUQFKRLHMNVPWX9XFXLMVJAGASMWMIFYUZFAUCEIO"
      "OYMEYWOIZTNEWFVZKOQFECWEPSMOYFSJJKEJQMPSXGE9WTYRQJVMHUQZFD9MJUFFCNSGAZCTXYPIJFNSXAUCYPGZMNWM"
      "QWSWCKAQYKXJTWINSGPPZG9HLDLEAWUWEVCTVRCBDFOXKUROXH9HXXAXVPEJFRSLOGRVGYZASTEBAQNXJJROCYRTDPYF"
      "UIQJVDHAKEG9YACV9HCPJUEUKOYFNWDXCCJBIFQKYOXGRDHVTHEQUMHO999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999");
  EXPECT_EQ(trx2.getCurrentIndex(), 1);
  EXPECT_EQ(trx2.getLastIndex(), 1);
  EXPECT_EQ(trx2.getNonce(),
            "999999999999999999999999999999999999999999999999999999DJNVKXVOFNIJUTMVIFKCFVRWFEK");
  EXPECT_EQ(trx2.getHash(),
            "SOVJUIVPGKWKRAYOJHV9JQFGZAUWHXTLNRWXWOVEGABCBAHDFOFKVZVORLHFDBBBCBFDEPXNM9NK99999");
  EXPECT_EQ(trx2.getTag(), "999999999999999999999999999");
  EXPECT_EQ(trx2.getTimestamp(), 1507576998);
  EXPECT_EQ(trx2.getTrunkTransaction(),
            "IRCRFRRPHHPRXV9SPFAYUODWDHM9KKKSELREJFVGYAUKNRQYZ9XKGJNYWOQPZGWJRWOUJHELPNICZ9999");
  EXPECT_EQ(trx2.getBranchTransaction(),
            "UPGFY9BEXQAX99ZISOQXUFWNGADQBOGCMXDSRIVVMLPKOOQLIB9YLSIFPANOWMMFZPUFTQGPYHF9Z9999");
  EXPECT_EQ(trx2.getAddress(),
            "999999999999999999999999999999999999999999999999999999999999999999999999999999999");
  EXPECT_EQ(trx2.getValue(), 0);
  EXPECT_EQ(trx2.getBundle(),
            "OTTLTEEKYQHLMGCKGSKMEELHZXNHU9DHODIIZGTLAO9SKRUBWQAIBVWYLLPZFBHOZAXTT9FECVWQEXBVC");
  EXPECT_EQ(trx2.getPersistence(), false);
}

TEST(Extended, FindTransactionObjectsByBundle) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto res = api.findTransactionObjectsByBundle(
      { "OTTLTEEKYQHLMGCKGSKMEELHZXNHU9DHODIIZGTLAO9SKRUBWQAIBVWYLLPZFBHOZAXTT9FECVWQEXBVC" });

  EXPECT_EQ(res.size(), 2UL);

  const auto& trx1 = res[1];
  EXPECT_EQ(
      trx1.getSignatureFragments(),
      "BMY9RQMXXBG9XJCCUKVQVXJIMRRPCX9KWIBWBLAOODDDHTFFFVBJSOEOXHEEWHBGMHTAUHXGBYQVBABPY9LIPAY9MAGV"
      "ITPCV9BPNZ9ZGYNSYIWHWEXBMBZROPRPTXUGXJOQPTYGXEUFPDRHUNPWYGCCNANA9RSBUAKAOZTQMCYLJKCDWQYTCRCV"
      "JATWKEFX9WMLHSKLMJ9EDOYSVQDIEGNTUXMILUBIWVCVIBAXSLZOBDMPIWLOAECUQFCTXINCJSKJFPDEAYVKY9CZTKQV"
      "AYXPVRGWKL9IMFIHPOUEQPSKHBMQEXPZGSSENSFD9OUTJDCTNIM9VJCCHYEMDZTVRMIOBYCDBAWFZAKBOULZJDBKWGB9"
      "NUCMXSLXKIZUBGXCYJAPQUYIDFHOYELK9PNWWGIDOTBAFDFBOLGHEGKDVBOOHHMRBLPYZO9QWR9DYKRVBMJRZXBI9TFJ"
      "BXBTVOOALSVCTX9PQRRCFPJBTYNLKIWLHWLWHXQYRZATEJNTFZQHKPIDYPXZV9MCFZDOIXGYVA9ZIRBLJXKALBQJVNZO"
      "BOVKQUPGUXUINZKIXAPSMQVFZVMDBSARRLFGIHIPHINBIUAHE9XZPNPRNKAQMWWKYGJMCYWPJLIMXBHXOJVROZZFJXZA"
      "9GVSJ9JKONHFWNNSEELFUGXADQIXQDJGDNTGKCYHRQAEXQJXEMM9A9YM9QKVGCYBLUBIISAIMQJFQLDWPDLFOXPWPOJS"
      "CIREDACYTKPKXAPDGOCYIGKJUKUYOFHUPHKNGFZJACVNYVXVFYRZDJLLLKJYMEPVE999BRIZLQVJQWVLODTKDLAAVYRY"
      "SIBVGURHPSEX9GGEJNNXOSCNMGJYXY9WJSLZOCDNIGZDRKZTRRLXCEBGJBFWTBDLPNMPMZAWDCWBZFXYBHTXTYSIXAK9"
      "DYBNJJUGJTHYBSMQEDXOFDXPRCFWKB9SQHMQDMUJFTCEUHALNVDGYFOA9AW9KWOUXGPHFGCCIWRTMFDCUGDMSCNSZCOZ"
      "ODKSP9VPQVFNDRFLRV9FQGDQHBJUYLUL9QOOGSZIDSRRUTF9ANBHQASSORMOMCCXHSFPKMMFDIRDQT9OTDNCAGNNPYDN"
      "WAAJRFXWWKWHLUJACUJUXHDGIBFAOGZFBPQWRCLPORKLCVXGL9JQAKWZBQYSZRYGFKTGKODLSLJNGK9CAYMZUTRLUXGE"
      "ACJVY9MXSRPHNXEZZLVCIQTXIWEEVIKSIKER9QRHOAPNYLBOLSKHBMREOBTYWOFUDPUW9NGCKRPCEOUHYCLSVZTU9QXM"
      "BDXJHDJND9LFUE9ZYIVQQZEJLAGTURMADKYNB9ZIQQOUUQTKAKHKYGFOZBAKZPCBMSFDJCXSARHZRSMSK9JLKTHJSWCR"
      "S9O9VMLNRHCRPZO9BDUOOQRLJK9CGNIOZZGZKPBTRIOQYWGCRSJYFKLSQKFADICELHQ9OWKLV9YEIYDIYATLILMAYOIF"
      "TBUJPJGVBMKDDYMSMNZRUT9GZGOZCFFSQPVHSXUIGWTQGDYFOCONNSYQI9ST99LE9ZWYQOLWHRCEXKUCFPYJBR9K9PXF"
      "FOSGGNLAMCJZYMQSSEFBUOWDZJAGQETMPNGWHYOJNHHPXSIKM9CXLXQGUEYAHW9OYJMUPFFIGZVVKEICLINNZRKMYROV"
      "UYHCSPADNNPEHA9ZMCRQLHNJUZP9CBMQWPXPHRJBVOZN9HLRDLKHJQEUAVSQR9KPQMPGQZUIPHBXUXVMYCRASB9XTWZO"
      "HJIHJKMEZBLJFAHGKFSMLN9XDVITRYUAXSBYGCLQSRJNVUWZYMHPHKKEPCA9GHWXLU9IRBTFWWVHZWURBJPFRGIKTNVY"
      "OUYJRVBZJJQTJNYJRHGRH9QIQUMVKHWMJGHTFDKWJJJFEFVCGWRFKRVUTJLGHDMXTSDQEGQFCTBQVCNLDFEUJEQDGB99"
      "F9T9VHNUISEYXPNBNBLZZTZLBISQN9XADSRXGWUCWRTXMCDKYHSODYRHSLIMJTNDFIMHRKKKHIECTMBTLWGMLQRGDIFU"
      "LRUDPOCZAEONMQOHTC9CUHZLLOQSUSTFYPTYHV9KOLPDDRTRCXFITJUZQSMHIYDFLU9LYN9YTEJ9YHJLPQDAAGHPKQRS"
      "UFPGFWDBXPCBOKJDAQVIQHTJIYZKXMHSHTT9EZDFRTYCGZAHGLMSFBTSSJZGLFZRLAHRLFK");
  EXPECT_EQ(trx1.getCurrentIndex(), 0);
  EXPECT_EQ(trx1.getLastIndex(), 1);
  EXPECT_EQ(trx1.getNonce(),
            "999999999999999999999999999999999999999999999999999999YOWYUNWPPFCGVZTJNRGHDKNNINP");
  EXPECT_EQ(trx1.getHash(),
            "VYTOQWVKMNIDHAFFQOBXKNEPIBKCIRBMVNPAINDCEHXTUWBRGJCMOVQQNNBUBCMBHYDNYSIVBUORA9999");
  EXPECT_EQ(trx1.getTag(), "CZUL99999999999999999999999");
  EXPECT_EQ(trx1.getTimestamp(), 1507576998);
  EXPECT_EQ(trx1.getTrunkTransaction(),
            "SOVJUIVPGKWKRAYOJHV9JQFGZAUWHXTLNRWXWOVEGABCBAHDFOFKVZVORLHFDBBBCBFDEPXNM9NK99999");
  EXPECT_EQ(trx1.getBranchTransaction(),
            "IRCRFRRPHHPRXV9SPFAYUODWDHM9KKKSELREJFVGYAUKNRQYZ9XKGJNYWOQPZGWJRWOUJHELPNICZ9999");
  EXPECT_EQ(trx1.getAddress(),
            "KPWCHICGJZXKE9GSUDXZYUAPLHAKAHYHDXNPHENTERYMMBQOPSQIDENXKLKCEYCPVTZQLEEJVYJZV9BWU");
  EXPECT_EQ(trx1.getValue(), 0);
  EXPECT_EQ(trx1.getBundle(),
            "OTTLTEEKYQHLMGCKGSKMEELHZXNHU9DHODIIZGTLAO9SKRUBWQAIBVWYLLPZFBHOZAXTT9FECVWQEXBVC");
  EXPECT_EQ(trx1.getPersistence(), false);

  const auto& trx2 = res[0];
  EXPECT_EQ(
      trx2.getSignatureFragments(),
      "FDWXHUNOXXFNJJHJHHKZQPO9IOWRHTNT9MYVYGDADONCDM9MZQHBXIHWECQZJUCEHRHBKTSXFEMCWUJ9BTSIUJGHPU9W"
      "F9MFGDADLZMLVOFPJSDKAFIJHBHETCPSNRDYERJZ9KDQFDRFWAHGPOHXFHLEWFLRTUWHAKOSWNVHYHBGW9UVECZDGTFO"
      "QUJCUSUDMEKNTWCC9VFLLWQ9TCWZZWNOAZCYTOFCJDCRUOKVH9JNVKNKCTOAJ9QYSGTKJHDHVUCYMLGYZZNXMPLSILMW"
      "WTQZTVUXXIMBFIKYGMPCCPQQY9ZJXKFMWMDQAAXRYJBBCJKPMCU9LWOGNPISTYLSNXYQTOWZWUBKEMBIEZTBYPHZUZQF"
      "OVLYLDZTHZAU9FKWGWRLSIM9BYZMJDDRMNQSBHLPPRPFWMINY9DWLFOEZMHCBYICIHWGWGVFUAEHZEBORRLVVNFTRINV"
      "9CKXITEIDPQEUGYAZFRFWAWYXSWFXPWXOEIGTAZVGEEMQQJECBH9RBQGWGN9ZWC9TSVQCVIQFENMYZPNLXHIPOBCPVQD"
      "IZKCLYUJNAJHDGPKDXVQWLVEGRHVQLEVJVTX9BMIKKCW99EQVWMNWJR9HPJGJIX9MLGITQRMDZVFWIIPBWJHWKLCLIQT"
      "UEWI9DGISVOZFN9YXICBWHAOSVLYOQHD9NEDTDIAMKBESHYPUNEGNOTZGXWYNCOLONXMUEFZGLXM9NBZBORLSVPMSTGQ"
      "AVYHYAMKCLKFITZSSQCTFMQDHVWNGBLGUKAZZMQCNSOSX9RHWSIHXVRORTPZOLK9BLRU9FXDT9FOVNGKVSORRQLBOXGJ"
      "MDWKL9DSBEWNKYWOHRXODADCWMWDXKETXKIL9EWRLGC9UFMR9UIPCKDWDPYX9MFTHMLPOZCLXGCMZDCIQSTXXFONGGLJ"
      "LQDNFRLSFV9RJUTIJTRVNJBLAJSLJJNNAZJKVWTAEYXXNMJUTYODBEAVUHVWYLHQTZDCXSW9SNZLHPAFXTGEOCYECFQX"
      "DMHPRFBUUQPOD9VQNHJJO9SIPSEQOSVPHAJTMUEUZBIRGJHBUQYMHCRTYAPEWXMRPVPHDUKUWCZNAZHVVZGJKPFXQWYZ"
      "FKIIMJVZNPISFUUYJXYSMCACQMJJIJZY9XVHWINC9IMZJQWOBYDQFLANMTO9TKNH9SGNGYESANYBZYKRBQOOZPLNXKTE"
      "PGULNUBFIERCY9VFCKRVNSYD9TKMBQAGFAXZGSDQEEBTDBRKCSHIFUMPDBUIITISLWAZHGAPOFMDJA9WGWEUOPWYJKIO"
      "CEMVGFAOFWPZBJCRRSHMHUG9NKKH9SOXTUJUAXBF9MHYWHJ9ZTJRUQFKRLHMNVPWX9XFXLMVJAGASMWMIFYUZFAUCEIO"
      "OYMEYWOIZTNEWFVZKOQFECWEPSMOYFSJJKEJQMPSXGE9WTYRQJVMHUQZFD9MJUFFCNSGAZCTXYPIJFNSXAUCYPGZMNWM"
      "QWSWCKAQYKXJTWINSGPPZG9HLDLEAWUWEVCTVRCBDFOXKUROXH9HXXAXVPEJFRSLOGRVGYZASTEBAQNXJJROCYRTDPYF"
      "UIQJVDHAKEG9YACV9HCPJUEUKOYFNWDXCCJBIFQKYOXGRDHVTHEQUMHO999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999");
  EXPECT_EQ(trx2.getCurrentIndex(), 1);
  EXPECT_EQ(trx2.getLastIndex(), 1);
  EXPECT_EQ(trx2.getNonce(),
            "999999999999999999999999999999999999999999999999999999DJNVKXVOFNIJUTMVIFKCFVRWFEK");
  EXPECT_EQ(trx2.getHash(),
            "SOVJUIVPGKWKRAYOJHV9JQFGZAUWHXTLNRWXWOVEGABCBAHDFOFKVZVORLHFDBBBCBFDEPXNM9NK99999");
  EXPECT_EQ(trx2.getTag(), "999999999999999999999999999");
  EXPECT_EQ(trx2.getTimestamp(), 1507576998);
  EXPECT_EQ(trx2.getTrunkTransaction(),
            "IRCRFRRPHHPRXV9SPFAYUODWDHM9KKKSELREJFVGYAUKNRQYZ9XKGJNYWOQPZGWJRWOUJHELPNICZ9999");
  EXPECT_EQ(trx2.getBranchTransaction(),
            "UPGFY9BEXQAX99ZISOQXUFWNGADQBOGCMXDSRIVVMLPKOOQLIB9YLSIFPANOWMMFZPUFTQGPYHF9Z9999");
  EXPECT_EQ(trx2.getAddress(),
            "999999999999999999999999999999999999999999999999999999999999999999999999999999999");
  EXPECT_EQ(trx2.getValue(), 0);
  EXPECT_EQ(trx2.getBundle(),
            "OTTLTEEKYQHLMGCKGSKMEELHZXNHU9DHODIIZGTLAO9SKRUBWQAIBVWYLLPZFBHOZAXTT9FECVWQEXBVC");
  EXPECT_EQ(trx2.getPersistence(), false);
}

TEST(Extended, FindTransactionObjectsByBundleInvalidTrxHash) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto res = api.findTransactionObjectsByBundle(
      { "SOVJUIVPGKWKRAYOJHV9JQFGZAUWHXTLNRWXWOVEGABCBAHDFOFKVZVORLHFDBBBCBFDEPXNM9NK99999" });

  EXPECT_EQ(res.size(), 0UL);
}

TEST(Extended, FindTransactionObjectsByBundleInvalidHash) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };

  EXPECT_THROW(api.findTransactionObjectsByBundle({ "salut" }), IOTA::Errors::IllegalState);
}

TEST(Extended, FindTailTransactionHash) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto res = api.findTailTransactionHash(
      { "SOVJUIVPGKWKRAYOJHV9JQFGZAUWHXTLNRWXWOVEGABCBAHDFOFKVZVORLHFDBBBCBFDEPXNM9NK99999" });

  EXPECT_EQ(res,
            "VYTOQWVKMNIDHAFFQOBXKNEPIBKCIRBMVNPAINDCEHXTUWBRGJCMOVQQNNBUBCMBHYDNYSIVBUORA9999");
}

TEST(Extended, FindTailTransactionHashWithTailTrx) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto res = api.findTailTransactionHash(
      { "VYTOQWVKMNIDHAFFQOBXKNEPIBKCIRBMVNPAINDCEHXTUWBRGJCMOVQQNNBUBCMBHYDNYSIVBUORA9999" });

  EXPECT_EQ(res,
            "VYTOQWVKMNIDHAFFQOBXKNEPIBKCIRBMVNPAINDCEHXTUWBRGJCMOVQQNNBUBCMBHYDNYSIVBUORA9999");
}

TEST(Extended, FindTailTransactionHashWithBundle) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto res = api.findTailTransactionHash(
      "OTTLTEEKYQHLMGCKGSKMEELHZXNHU9DHODIIZGTLAO9SKRUBWQAIBVWYLLPZFBHOZAXTT9FECVWQEXBVC");

  EXPECT_EQ(res, IOTA::EmptyHash);
}

TEST(Extended, FindTailTransactionHashWithInvalid) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };

  EXPECT_THROW(api.findTailTransactionHash("salut"), IOTA::Errors::IllegalState);
}

TEST(Extended, FindTransactionsByAddresses) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto res = api.findTransactionsByAddresses(
      { "KPWCHICGJZXKE9GSUDXZYUAPLHAKAHYHDXNPHENTERYMMBQOPSQIDENXKLKCEYCPVTZQLEEJVYJZV9BWU" });

  ASSERT_EQ(res.getStatusCode(), 200);
  EXPECT_FALSE(res.getHashes().empty());
}

TEST(Extended, FindTransactionsByAddressesInvalidAddress) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto res = api.findTransactionsByAddresses({ "9999" });

  ASSERT_EQ(res.getStatusCode(), 400);
  EXPECT_GE(res.getDuration(), 0);
  EXPECT_EQ(res.getError(), "Invalid address input");
}

TEST(Extended, FindTransactionsByTags) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto res = api.findTransactionsByTags({ "QEXL99999999999999999999999999" });

  ASSERT_EQ(res.getStatusCode(), 200);
  EXPECT_FALSE(res.getHashes().empty());
}

TEST(Extended, FindTransactionsByApprovees) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto res = api.findTransactionsByApprovees(
      { "GFJUYJQRNSNGLSMAZUYRZEMKQRYZS9WACJQPSVDHLMUSDKDJZQ9TAWQCWJKFJTEQBSAI9ROLVQLH99999" });

  ASSERT_EQ(res.getStatusCode(), 200);
  EXPECT_FALSE(res.getHashes().empty());
}

TEST(Extended, FindTransactionsByApproveesInvalidApprovee) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto res = api.findTransactionsByApprovees({ "9999" });

  ASSERT_EQ(res.getStatusCode(), 400);
  EXPECT_GE(res.getDuration(), 0);
  EXPECT_EQ(res.getError(), "Invalid approvees hash");
}

TEST(Extended, FindTransactionsByBundles) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto res = api.findTransactionsByBundles(
      { "XCRFXNBPLVMWLSMCUQVNXAKICTH9AHRIZWUEWKTIQNIZXITSPLIQPEPZEGBYLEWWEXYJMIWAYYAAWFJC9" });

  ASSERT_EQ(res.getStatusCode(), 200);
  EXPECT_FALSE(res.getHashes().empty());
}

TEST(Extended, FindTransactionsByBundlesInvalidBundle) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto res = api.findTransactionsByBundles({ "9999" });

  // TODO Should it be checked before as an exception ?
  ASSERT_EQ(res.getStatusCode(), 400);
  EXPECT_GE(res.getDuration(), 0);
  EXPECT_EQ(res.getError(), "Invalid bundle hash");
}

TEST(Extended, GetAccountData) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto res = api.getAccountData(
      "IHDEENZYITYVYSPKAURUZAQKGVJEREFDJMYTANNXXGPZ9GJWTEOJJ9IPMXOGZNQLSNMFDSQOTZAEETUEA", 0, 2,
      true, 0, true, 0, 0, true, 0);

  EXPECT_EQ(res.getAddresses(), std::vector<IOTA::Types::Trytes>(
                                    { "LXQHWNY9CQOHPNMKFJFIJHGEPAENAOVFRDIBF99PPHDTWJDCGHLY"
                                      "ETXT9NPUVSNKT9XDTDYNJKJCPQMZCCOZVXMTXC",
                                      "WJWYKQXJXAZVOJPLUWB999QAEFXSVYNZFSRMLLWFJAMRGJTYXUKU"
                                      "BALUTPRTZGKA9EXUKHFTENRXDGRJWQGRUEOLIW" }));

  auto trx = IOTA::Models::Transaction(
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "999999999999999999999999999999999999999999999999999999999999999999999999999LXQHWNY9CQOHP"
      "NMKFJFIJHGEPAENAOVFRDIBF99PPHDTWJDCGHLYETXT9NPUVSNKT9XDTDYNJKJCPQMZC99999999999999999999"
      "9999999999999999999999999999999999RVHP9XD99999999999999999999JQIQOBE9KUHXQBAQEVNSTQQUUNU"
      "AXKBPPWRSGIBBGTGOGNHVRBBEGXLJJRPASZEAAAEHDPDPQLXYESNBXDSLQCDAXCUQIPVELRGTZVRYTWH9LJVPFRY"
      "ZUFPJFXGZYBNGYBRZRWRY9HFXOFREKSXEZOFOJLIQD999999UTAYBTBCLKRGVVJFAGZMJPGWMARCAMRYJMMGUCZX"
      "PA9ASCITTDQPAEDXGYLVROUQPXTFNYIABENA9999999999999999999999999999999GHCHHI9IE999999999MMM"
      "MMMMMMJA999IG99999999999999999999");
  auto trxs   = std::vector<IOTA::Models::Transaction>({ trx });
  auto bundle = IOTA::Models::Bundle(trxs);

  EXPECT_EQ(res.getTransfers(), std::vector<IOTA::Models::Bundle>({ bundle }));
  EXPECT_EQ(res.getBalance(), 0);
}

TEST(Extended, GetAccountDataInvalidSeed) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };

  EXPECT_THROW(api.getAccountData("hello", 0, 2, true, 0, true, 0, 0, true, 0),
               IOTA::Errors::IllegalState);
}

TEST(Extended, GetAccountDataInvalidSecurity) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };

  EXPECT_THROW(
      api.getAccountData(
          "IHDEENZYITYVYSPKAURUZAQKGVJEREFDJMYTANNXXGPZ9GJWTEOJJ9IPMXOGZNQLSNMFDSQOTZAEETUEA", 0,
          42, true, 0, true, 0, 0, true, 0),
      IOTA::Errors::IllegalState);
}

TEST(Extended, GetAccountDataWithoutChechsum) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto res = api.getAccountData(
      "IHDEENZYITYVYSPKAURUZAQKGVJEREFDJMYTANNXXGPZ9GJWTEOJJ9IPMXOGZNQLSNMFDSQOTZAEETUEA", 0, 2,
      false, 0, true, 0, 0, true, 0);

  EXPECT_EQ(
      res.getAddresses(),
      std::vector<IOTA::Types::Trytes>(
          { "LXQHWNY9CQOHPNMKFJFIJHGEPAENAOVFRDIBF99PPHDTWJDCGHLYETXT9NPUVSNKT9XDTDYNJKJCPQMZC",
            "WJWYKQXJXAZVOJPLUWB999QAEFXSVYNZFSRMLLWFJAMRGJTYXUKUBALUTPRTZGKA9EXUKHFTENRXDGRJW" }));

  auto trx = IOTA::Models::Transaction(
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "999999999999999999999999999999999999999999999999999999999999999999999999999LXQHWNY9CQOHP"
      "NMKFJFIJHGEPAENAOVFRDIBF99PPHDTWJDCGHLYETXT9NPUVSNKT9XDTDYNJKJCPQMZC99999999999999999999"
      "9999999999999999999999999999999999RVHP9XD99999999999999999999JQIQOBE9KUHXQBAQEVNSTQQUUNU"
      "AXKBPPWRSGIBBGTGOGNHVRBBEGXLJJRPASZEAAAEHDPDPQLXYESNBXDSLQCDAXCUQIPVELRGTZVRYTWH9LJVPFRY"
      "ZUFPJFXGZYBNGYBRZRWRY9HFXOFREKSXEZOFOJLIQD999999UTAYBTBCLKRGVVJFAGZMJPGWMARCAMRYJMMGUCZX"
      "PA9ASCITTDQPAEDXGYLVROUQPXTFNYIABENA9999999999999999999999999999999GHCHHI9IE999999999MMM"
      "MMMMMMJA999IG99999999999999999999");
  auto trxs   = std::vector<IOTA::Models::Transaction>({ trx });
  auto bundle = IOTA::Models::Bundle(trxs);

  EXPECT_EQ(res.getTransfers(), std::vector<IOTA::Models::Bundle>({ bundle }));
  EXPECT_EQ(res.getBalance(), 0);
}

TEST(Extended, GetAccountDataTotal) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto res = api.getAccountData(
      "IHDEENZYITYVYSPKAURUZAQKGVJEREFDJMYTANNXXGPZ9GJWTEOJJ9IPMXOGZNQLSNMFDSQOTZAEETUEA", 0, 2,
      true, 1, true, 0, 0, true, 0);

  EXPECT_EQ(res.getAddresses(), std::vector<IOTA::Types::Trytes>(
                                    { "LXQHWNY9CQOHPNMKFJFIJHGEPAENAOVFRDIBF99PPHDTWJDCGHLY"
                                      "ETXT9NPUVSNKT9XDTDYNJKJCPQMZCCOZVXMTXC" }));

  auto trx = IOTA::Models::Transaction(
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "999999999999999999999999999999999999999999999999999999999999999999999999999LXQHWNY9CQOHP"
      "NMKFJFIJHGEPAENAOVFRDIBF99PPHDTWJDCGHLYETXT9NPUVSNKT9XDTDYNJKJCPQMZC99999999999999999999"
      "9999999999999999999999999999999999RVHP9XD99999999999999999999JQIQOBE9KUHXQBAQEVNSTQQUUNU"
      "AXKBPPWRSGIBBGTGOGNHVRBBEGXLJJRPASZEAAAEHDPDPQLXYESNBXDSLQCDAXCUQIPVELRGTZVRYTWH9LJVPFRY"
      "ZUFPJFXGZYBNGYBRZRWRY9HFXOFREKSXEZOFOJLIQD999999UTAYBTBCLKRGVVJFAGZMJPGWMARCAMRYJMMGUCZX"
      "PA9ASCITTDQPAEDXGYLVROUQPXTFNYIABENA9999999999999999999999999999999GHCHHI9IE999999999MMM"
      "MMMMMMJA999IG99999999999999999999");
  auto trxs   = std::vector<IOTA::Models::Transaction>({ trx });
  auto bundle = IOTA::Models::Bundle(trxs);

  EXPECT_EQ(res.getTransfers(), std::vector<IOTA::Models::Bundle>({ bundle }));
  EXPECT_EQ(res.getBalance(), 0);
}

TEST(Extended, GetAccountDataReturnAll) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto res = api.getAccountData(
      "IHDEENZYITYVYSPKAURUZAQKGVJEREFDJMYTANNXXGPZ9GJWTEOJJ9IPMXOGZNQLSNMFDSQOTZAEETUEA", 0, 2,
      true, 0, false, 0, 0, true, 0);

  EXPECT_EQ(res.getAddresses(),
            std::vector<IOTA::Types::Trytes>({ "WJWYKQXJXAZVOJPLUWB999QAEFXSVYNZFSRMLLWFJAMRGJTYXUK"
                                               "UBALUTPRTZGKA9EXUKHFTENRXDGRJWQGRUEOLIW" }));
  auto trx = IOTA::Models::Transaction(
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "999999999999999999999999999999999999999999999999999999999999999999999999999LXQHWNY9CQOHP"
      "NMKFJFIJHGEPAENAOVFRDIBF99PPHDTWJDCGHLYETXT9NPUVSNKT9XDTDYNJKJCPQMZC99999999999999999999"
      "9999999999999999999999999999999999RVHP9XD99999999999999999999JQIQOBE9KUHXQBAQEVNSTQQUUNU"
      "AXKBPPWRSGIBBGTGOGNHVRBBEGXLJJRPASZEAAAEHDPDPQLXYESNBXDSLQCDAXCUQIPVELRGTZVRYTWH9LJVPFRY"
      "ZUFPJFXGZYBNGYBRZRWRY9HFXOFREKSXEZOFOJLIQD999999UTAYBTBCLKRGVVJFAGZMJPGWMARCAMRYJMMGUCZX"
      "PA9ASCITTDQPAEDXGYLVROUQPXTFNYIABENA9999999999999999999999999999999GHCHHI9IE999999999MMM"
      "MMMMMMJA999IG99999999999999999999");
  auto trxs   = std::vector<IOTA::Models::Transaction>({ trx });
  auto bundle = IOTA::Models::Bundle(trxs);

  EXPECT_EQ(res.getTransfers(), std::vector<IOTA::Models::Bundle>({ bundle }));
  EXPECT_EQ(res.getBalance(), 0);
}

TEST(Extended, GetAccountDataStartEnd) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto res = api.getAccountData(
      "IHDEENZYITYVYSPKAURUZAQKGVJEREFDJMYTANNXXGPZ9GJWTEOJJ9IPMXOGZNQLSNMFDSQOTZAEETUEA", 0, 2,
      true, 0, true, 1, 1, true, 0);

  EXPECT_EQ(res.getAddresses(),
            std::vector<IOTA::Types::Trytes>({ "LXQHWNY9CQOHPNMKFJFIJHGEPAENAOVFRDIBF99PPHDTWJDCGHL"
                                               "YETXT9NPUVSNKT9XDTDYNJKJCPQMZCCOZVXMTXC",
                                               "WJWYKQXJXAZVOJPLUWB999QAEFXSVYNZFSRMLLWFJAMRGJTYXUK"
                                               "UBALUTPRTZGKA9EXUKHFTENRXDGRJWQGRUEOLIW" }));

  EXPECT_EQ(res.getTransfers(), std::vector<IOTA::Models::Bundle>{});
  EXPECT_EQ(res.getBalance(), 0);
}

TEST(Extended, GetAccountDataMin) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };

  EXPECT_THROW(
      api.getAccountData(
          "IHDEENZYITYVYSPKAURUZAQKGVJEREFDJMYTANNXXGPZ9GJWTEOJJ9IPMXOGZNQLSNMFDSQOTZAEETUEA", 0, 2,
          true, 0, true, 0, 0, true, 1000),
      IOTA::Errors::IllegalState);
}

TEST(Extended, GetBalancesAndFormat) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto res = api.getBalancesAndFormat({ "FFUIAREGAAAHNTPJRGRFCNCNOTKTKPWJEGUDWQHZVVO9MTAXZIDMXBMWJX"
                                        "TLUBHNFNKYCCTQUXOUYFKX99MUZJEPYD",
                                        "FFUIAREGAAAHNTPJRGRFCNCNOTKTKPWJEGUDWQHZVVO9MTAXZIDMXBMWJX"
                                        "TLUBHNFNKYCCTQUXOUYFKX99MUZJEPYD" },
                                      0, 0, 2);

  EXPECT_EQ(res.getTotalBalance(), 617650144175136);
  EXPECT_EQ(res.getInput().size(), 2UL);

  const auto& input_1 = res.getInput()[0];
  EXPECT_EQ(
      input_1.getAddress(),
      "FFUIAREGAAAHNTPJRGRFCNCNOTKTKPWJEGUDWQHZVVO9MTAXZIDMXBMWJXTLUBHNFNKYCCTQUXOUYFKX99MUZJEPYD");
  EXPECT_EQ(input_1.getBalance(), 308825072087568);
  EXPECT_EQ(input_1.getKeyIndex(), 0);
  EXPECT_EQ(input_1.getSecurity(), 2);

  const auto& input_2 = res.getInput()[1];
  EXPECT_EQ(
      input_2.getAddress(),
      "FFUIAREGAAAHNTPJRGRFCNCNOTKTKPWJEGUDWQHZVVO9MTAXZIDMXBMWJXTLUBHNFNKYCCTQUXOUYFKX99MUZJEPYD");
  EXPECT_EQ(input_2.getBalance(), 308825072087568);
  EXPECT_EQ(input_2.getKeyIndex(), 1);
  EXPECT_EQ(input_2.getSecurity(), 2);
}

TEST(Extended, GetBalancesAndFormatInvalidSecurity) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };

  EXPECT_THROW(
      api.getBalancesAndFormat({ "FFUIAREGAAAHNTPJRGRFCNCNOTKTKPWJEGUDWQHZVVO9MTAXZIDMXBMWJX"
                                 "TLUBHNFNKYCCTQUXOUYFKX99MUZJEPYD",
                                 "FFUIAREGAAAHNTPJRGRFCNCNOTKTKPWJEGUDWQHZVVO9MTAXZIDMXBMWJX"
                                 "TLUBHNFNKYCCTQUXOUYFKX99MUZJEPYD" },
                               0, 0, 0),
      IOTA::Errors::IllegalState);
}

TEST(Extended, GetBalancesAndFormatInvalidBalance) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };

  EXPECT_THROW(
      api.getBalancesAndFormat({ "FFUIAREGAAAHNTPJRGRFCNCNOTKTKPWJEGUDWQHZVVO9MTAXZIDMXBMWJX"
                                 "TLUBHNFNKYCCTQUXOUYFKX99MUZJEPYD",
                                 "FFUIAREGAAAHNTPJRGRFCNCNOTKTKPWJEGUDWQHZVVO9MTAXZIDMXBMWJX"
                                 "TLUBHNFNKYCCTQUXOUYFKX99MUZJEPYD" },
                               717650144175136, 0, 2),
      IOTA::Errors::IllegalState);
}

TEST(Extended, GetBalancesAndFormatStart) {
  auto api = IOTA::API::Extended{ get_proxy_host(), get_proxy_port() };
  auto res = api.getBalancesAndFormat({ "FFUIAREGAAAHNTPJRGRFCNCNOTKTKPWJEGUDWQHZVVO9MTAXZIDMXBMWJX"
                                        "TLUBHNFNKYCCTQUXOUYFKX99MUZJEPYD",
                                        "FFUIAREGAAAHNTPJRGRFCNCNOTKTKPWJEGUDWQHZVVO9MTAXZIDMXBMWJX"
                                        "TLUBHNFNKYCCTQUXOUYFKX99MUZJEPYD" },
                                      0, 10, 2);

  EXPECT_EQ(res.getTotalBalance(), 617650144175136);
  EXPECT_EQ(res.getInput().size(), 2UL);

  const auto& input_1 = res.getInput()[0];
  EXPECT_EQ(
      input_1.getAddress(),
      "FFUIAREGAAAHNTPJRGRFCNCNOTKTKPWJEGUDWQHZVVO9MTAXZIDMXBMWJXTLUBHNFNKYCCTQUXOUYFKX99MUZJEPYD");
  EXPECT_EQ(input_1.getBalance(), 308825072087568);
  EXPECT_EQ(input_1.getKeyIndex(), 10);
  EXPECT_EQ(input_1.getSecurity(), 2);

  const auto& input_2 = res.getInput()[1];
  EXPECT_EQ(
      input_2.getAddress(),
      "FFUIAREGAAAHNTPJRGRFCNCNOTKTKPWJEGUDWQHZVVO9MTAXZIDMXBMWJXTLUBHNFNKYCCTQUXOUYFKX99MUZJEPYD");
  EXPECT_EQ(input_2.getBalance(), 308825072087568);
  EXPECT_EQ(input_2.getKeyIndex(), 11);
  EXPECT_EQ(input_2.getSecurity(), 2);
}
